package com.strategy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

//https://refactoring.guru/design-patterns/strategy/java/example#:~:text=Strategy%20is%20a%20behavioral%20design,delegates%20it%20executing%20the%20behavior.

/**
 * World first console e-commerce application.
 */
public class StrategyDP {

	private static Map<Integer, Integer> priceOnProducts = new HashMap<>();
	private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	private static Order order = new Order();
	private static PayStrategy strategy;

	static {
		priceOnProducts.put(1, 2200);
		priceOnProducts.put(2, 1850);
		priceOnProducts.put(3, 1100);
		priceOnProducts.put(4, 890);
	}

	public static void main(String[] args) throws NumberFormatException, IOException {

		while (!order.isClosed()) {

			int cost;

			String continueChoice;
			do {
				System.out.print("Please, select a product:" + "\n" + "1 - Mother board" + "\n" + "2 - CPU" + "\n"
						+ "3 - HDD" + "\n" + "4 - Memory" + "\n");
				int choice = Integer.parseInt(reader.readLine());
				cost = priceOnProducts.get(choice);
				System.out.print("Count: ");
				int count = Integer.parseInt(reader.readLine());
				order.setTotalCost(cost * count);
				System.out.print("Do you wish to continue selecting products? Y/N: ");
				continueChoice = reader.readLine();
			} while (continueChoice.equalsIgnoreCase("Y"));
		}
	}

}
